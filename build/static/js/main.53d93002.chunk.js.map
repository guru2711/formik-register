{"version":3,"sources":["form.js","App.js","reportWebVitals.js","index.js"],"names":["Forms","formik","useFormik","initialValues","email","password","repassword","validate","values","errors","length","onsubmit","alert","JSON","stringify","Form","onSubmit","handleSubmit","Group","className","controlId","Label","Control","type","placeholder","name","onChange","handleChange","value","Text","autoComplete","Password","Button","variant","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yNAGaA,EAAQ,WAEnB,IA4BMC,EAASC,YAAU,CACnBC,cAAc,CAClBC,MAAM,GACNC,SAAS,GACTC,WAAW,IAERC,SAlCY,SAAAC,GACf,IAAMC,EAAS,GAuBnB,OAtBQD,EAAOJ,MAGFI,EAAOJ,MAAMM,OAAS,IAC7BD,EAAOL,MAAQ,gCAHfK,EAAOL,MAAQ,WAMbI,EAAOH,SAGFG,EAAOH,SACdI,EAAOJ,SAAW,+BACY,aAApBG,EAAOH,WACjBI,EAAOJ,SAAW,2BALlBI,EAAOJ,SAAW,WAQhBG,EAAOF,WAGHE,EAAOF,aAAeE,EAAOH,WACnCI,EAAOH,WAAa,iCAHpBG,EAAOH,WAAa,WAKnBG,GAWAE,SAAU,SAAAH,GACRI,MAAMC,KAAKC,UAAUN,EAAO,KAAK,OAItC,OACI,gCACI,0CAEA,eAACO,EAAA,EAAD,CAAMC,SAAUf,EAAOgB,aAAvB,UACV,eAACF,EAAA,EAAKG,MAAN,CAAYC,UAAU,OAAOC,UAAU,iBAAvC,UACE,cAACL,EAAA,EAAKM,MAAN,4BACA,cAACN,EAAA,EAAKO,QAAN,CAAcC,KAAK,QAAQC,YAAY,cAAcC,KAAK,QAAQC,SAAUzB,EAAO0B,aAC9EC,MAAO3B,EAAOO,OAAOJ,QACrBH,EAAOQ,OAAOL,MAAO,oCAAOH,EAAOQ,OAAOL,SAAc,KAC7D,cAACW,EAAA,EAAKc,KAAN,CAAWV,UAAU,aAArB,+DAIF,eAACJ,EAAA,EAAKG,MAAN,CAAYC,UAAU,OAAOC,UAAU,oBAAvC,UACE,cAACL,EAAA,EAAKM,MAAN,uBACA,cAACN,EAAA,EAAKO,QAAN,CAAcC,KAAK,WAAWC,YAAY,WAAYC,KAAK,WAAWK,aAAa,KAAKJ,SAAUzB,EAAO0B,aACpGC,MAAO3B,EAAOO,OAAOH,WACpBJ,EAAOQ,OAAOsB,SAAU,oCAAO9B,EAAOQ,OAAOsB,YAAiB,QAQtE,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUV,KAAK,SAA/B,6BCzDaW,MAVf,WACE,OACE,qBAAKf,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACF,cAAC,EAAD,SCIWgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.53d93002.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button,Form} from 'react-bootstrap';\r\nimport {useFormik} from \"formik\"\r\nexport const Forms = () => {\r\n\r\n  const validate = values => {\r\n    const errors = {}\r\n    if(!values.email){\r\n      errors.email = \"Required\"\r\n    }\r\n    else if (values.email.length < 4){\r\n      errors.email = \"Must be 5 Characters or more\"\r\n    }\r\n\r\n    if(!values.password){\r\n      errors.password = \"Required\"\r\n    }\r\n    else if (values.password){\r\n      errors.password = \"Must be 8 Characters or more\"\r\n    } else if ( values.password === \"12345678\"){\r\n      errors.password = \"Must not be 12345678!!!\"\r\n    }\r\n    \r\n    if(!values.repassword){\r\n      errors.repassword = \"Required\"\r\n    }\r\n    else if(values.repassword !== values.password){\r\n      errors.repassword = \"second password doesn't match\"\r\n    }\r\nreturn errors\r\n\r\n  }\r\n\r\n  const formik = useFormik({\r\n        initialValues:{\r\n    email:\"\",\r\n    password:\"\",\r\n    repassword:\"\"\r\n       },\r\n       validate,\r\n       onsubmit: values => {\r\n         alert(JSON.stringify(values,null,2))\r\n       }\r\n   })\r\n\r\n    return (\r\n        <div>\r\n            <h1>Register</h1>\r\n            \r\n            <Form onSubmit={formik.handleSubmit}>\r\n  <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n    <Form.Label>Email address</Form.Label>\r\n    <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"email\" onChange={formik.handleChange}\r\n         value={formik.values.email}/>\r\n        {formik.errors.email ?<div> {formik.errors.email}</div>: null}\r\n    <Form.Text className=\"text-muted\">\r\n      We'll never share your email with anyone else.\r\n    </Form.Text>\r\n  </Form.Group>\r\n  <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n    <Form.Label>Password</Form.Label>\r\n    <Form.Control type=\"password\" placeholder=\"Password\"  name=\"password\" autoComplete=\"on\" onChange={formik.handleChange}\r\n         value={formik.values.password}/>\r\n         {formik.errors.Password ?<div> {formik.errors.Password}</div>: null}\r\n  </Form.Group>\r\n  {/* <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n    <Form.Label>Password again</Form.Label>\r\n    <Form.Control type=\"password\" placeholder=\"Password again\"  name=\"repassword\" autoComplete=\"on\" onChange={formik.handleChange}\r\n         value={formik.values.repassword}/>\r\n         {formik.errors.repassword ?<div> {formik.errors.repassword}</div>: null}\r\n  </Form.Group> */}\r\n  <Button variant=\"primary\" type=\"submit\">\r\n    Register\r\n  </Button>\r\n  </Form>\r\n           \r\n            \r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport { Forms } from './form';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n    <Forms />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}